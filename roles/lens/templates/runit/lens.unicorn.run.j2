#!/bin/bash
#
# Generated by Ansible
# Local modification will be overwritten.
#

# Settings
APP_ROOT={{ lens_web_base_dir }}
APP_USER={{ lens_deploy_user.name }}
APP_GROUP={{ lens_deploy_user.name }}
APP_RAILS_ENV='{{ lens_env }}'

UNICORN_CONFIG="$APP_ROOT/current/config/unicorn/$APP_RAILS_ENV.rb"

CMD="bundle exec unicorn -E $APP_RAILS_ENV -c $UNICORN_CONFIG"
CHPSTKEY="-u ${APP_USER}:${APP_GROUP}"


# Set environment variables
export LANG=ru_RU.utf8
export RAILS_ENV=$APP_RAILS_ENV
export UNICORN_PORT={{ item.port }}
export UNICORN_WORKERS={{ item.workers }}
export UNICORN_BACKLOG={{ item.backlog }}

export PATH=/home/{{ lens_deploy_user.name }}/.rbenv/shims:/home/{{ lens_deploy_user.name }}/.rbenv/bin:$PATH

CUR_PID_FILE=$APP_ROOT/shared/pids/lens-unicorn.pid;
OLD_PID_FILE=$CUR_PID_FILE.oldbin;

cd ${APP_ROOT}/current

# Run
exec 2>&1
echo "Running lens web server..."
exec chpst $CHPSTKEY $CMD

function is_pid_running() {
    set +e
    if [ -n $1 ] && kill -0 $1 >/dev/null 2>&1; then
        echo "yes"
    fi
    set -e
}

echo "My pid: $$"

if [ -e $OLD_PID_FILE ]; then
    OLD_PID=$(cat $OLD_PID_FILE)
    echo "Unicorn appears to be restarting: waiting for old master ($OLD_PID) to exit"
    while [ -n "$(is_pid_running $OLD_PID)" ]; do
        /bin/echo -n '.'
        sleep 2
    done
fi

if [ -e $CUR_PID_FILE ]; then
    CUR_PID=$(cat $CUR_PID_FILE)
    if [ -n "$(is_pid_running $CUR_PID)" ]; then
        echo "Already running as $CUR_PID"
        RUNNING=true
    fi
fi

if [ ! $RUNNING ]; then
    echo "Starting unicorn"
    chpst -u "${APP_USER}:${APP_GROUP}" $CMD 2>&1 &
    sleep 5
    CUR_PID=$(cat $CUR_PID_FILE)
fi

function restart() {
    echo "Asking unicorn to re-exec itself with USR2"
    kill -USR2 $CUR_PID
    # Wait and then exit -- after runit restarts the script, we'll
    # wait for the re-exec'd process
    sleep 5
    echo "Restarting to supervise new unicorn"
    exit
}

function graceful_shutdown() {
    echo "Requesting graceful shutdown"
    kill -QUIT $CUR_PID
}

trap restart USR2 HUP QUIT
trap graceful_shutdown INT TERM

echo "Watching for unicorn ($CUR_PID) exiting"
while [ -n "$(is_pid_running $CUR_PID)" ]; do
echo "is pid running"
sleep 2
done
echo "Unicorn has exited."
